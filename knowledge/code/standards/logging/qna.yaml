version: 3
domain: Fandom
created_by: mairin
seed_examples:
  - context: |
      What is Sensitive Data?
      Before jumping into the best practices, let’s first discuss what constitutes sensitive data. Sensitive data is private information that must be protected from unauthorized access. 

      This following is a non-exhaustive list of data that’s considered sensitive:

      Personally Identifiable Information (PII): This includes data like full names, addresses, email address, driver’s license number, and phone number
      Financial data: Credit card information and other financial data
      Healthcare data: Medical history and records
      Passwords
      IP address
      Although the data listed above is considered sensitive and is regulated under compliance laws like GDPR, PCI, and HIPPA, it’s important to look at data sensitivity in the context of your company and product. For example, a zip code isn't considered sensitive PII, but you wouldn’t want this detail about your customers to end up in the public domain (and neither would they). 

      When logging any data, you should ask yourself, “What’s the likely impact to my business if this information ends up in the wrong hands?” If having this data leaked would damage your business and customer trust, then you should treat it as sensitive data and avoid logging it.

      From a consumer's perspective, their data is their data, and news about a breach will hurt your business reputation, regardless of what data was compromised. In fact, according to McKinsey, 87% of consumers said they would not do business with a company if they had concerns about its security practices.
    questions_and_answers:
      - question: |
          What is sensitive data
        answer: |
          Personally Identifiable Information (PII), Financial data, Healthcare data, IP address
      - question: |
          What should I consider when logging any data?
        answer: |
          What’s the likely impact to my business if this information ends up in the wrong hands?” If having this data leaked would damage your business and customer trust, then you should treat it as sensitive data and avoid logging it.
  - context: |
      6 Best Practices for Keeping Sensitive Data Out of Your Logs
      Now that we understand what sensitive data is and the dangers of logging it, let’s take a look at the best practices for avoiding these problems. 

      1. Isolate Sensitive Data
      When you pass sensitive data like a user’s name, email, and address through your system, it’s much more likely to end up being logged by APIs or other systems and stored within your application database. Instead, you want to minimize the exposure your systems have to sensitive data by isolating it within a single source of truth like a data privacy vault.

      Diagram of isolated sensitive data
      Example of Data Privacy Vault Integration with an Existing Stack
      As shown in the image above, with a data privacy vault, all sensitive data is isolated and protected within the vault. Your application never passes sensitive fields through internal APIs or stores sensitive fields within the application database. This way database backups, SQL logs, application logs, and server logs can’t have any sensitive data because it’s never present in the systems being logged or backed up.

      2. Log Tokens, Not Values
      When writing application logs, there’s a temptation to include an identifier for a user, like their name or email. This can help with debugging, but despite the convenience, you need to avoid it. 

      A simple way of avoiding this is to log a reference to the raw value through a process like tokenization. With tokenization, you swap the sensitive data for a token. 

      For example, if you tokenize a customer’s email, like “joe@acme.com”, it gets replaced by an obfuscated (or tokenized) string like “bwe09f@fg7d8.com”.  In this example, we’re using format-preserving tokenization, so the token is structured like a valid email address but has no exploitable value and can be safely written to a log.

      Table of a tokenized data store
      Example Tokenized Data Store
      With your sensitive data isolated and secured in a data privacy vault, all application references become tokens. Combining data isolation with tokenization, you get data privacy plus the utility and convenience of storing a form of identity in your logs. With the right permissions, you can detokenize the tokens to retrieve the original sensitive data when your workflows need it.

      3. Encrypt During Transit and at Rest
      In 2021, DreamHost leaked 814 million records online because of a non-password protected database and unencrypted internal records written to monitoring and file logs. This incident is a good reminder that it’s imperative that you encrypt data during transit and at rest. If your data is encrypted at rest, then even if someone steals your database backup or log file, they’ll need the key to do anything with the data.

      Additionally, since web servers often automatically log requests, you need to encrypt data during transit, even between internal systems. This will help prevent encrypted sensitive data from ending up in your logs.

      4. Keep PII Out of URLs
      It’s common for proxy and web servers to automatically log URL requests. If you have a URL structure like /users/name-of-individual or /users/email, the names and email addresses of your customers are likely to be logged. 

      To avoid this, you should replace the use of sensitive user identifiers in URLs like names and emails with an arbitrary ID. This could be the row ID of the user, or if you need different URLs to map to different field values you could utilize tokenization here as well.

      In the image below, the problematic URLs on the left hand side get transformed into the URLs on the right via tokenization. The token values become the URL identifiers. 

      Code snippet example of sensitive data tokenized
      Transforming Problematic URLs with Tokenization
      If you’re already utilizing the first two best practices in this guide, your application is only storing tokenized data. This means that your application database queries will continue to work against the tokenized identifiers passed in the URL without modification.

      5. Redact and Mask Data
      Besides tokenization, combining redaction and masking is another effective method to keep sensitive data out of your logs. Some application services may need partial access to data, like the last four digits of a credit card number or social security number (SSN).

      Data masking is a one-way irreversible process for protecting sensitive data. A masking method creates a version of the sensitive data that looks structurally similar to the original but hides the most sensitive information contained within a field. Redaction is similar to masking, but hides all of the information contained within a field.

      For example, in the image below, first names, last names, and SSNs are masked. The masked values can safely be written to your logs.

      diagram of sensitive data like SSN and names masked
      Example of using masked data in logs
      There are also many situations where an application service doesn’t need to know even partial information. In this case, the sensitive data should be redacted instead of masked.

      6. Data Governance
      A data privacy vault isolates sensitive data and prevents copies from being replicated throughout your systems. But locking data away isn’t enough. Real value comes when you can both store and use data securely.

      So, while tokenization, masking, and redaction are techniques for using data securely, you still need a way to govern access and control data visibility for various apps and services. This way the information in your logs matches each service’s access to sensitive information.

      Data governance is a collection of policies and processes that help assure that data is managed, secured, accurate, audited, and documented. For example, in the image below you can see how the policies set for a specific user role determine which fields are redacted, how data is masked, and how data is tokenized.

      diagram example of data governance of sensitive data
      Example of data governance managing access and data visibility
      By tightly controlling not only access but how a service can view data, you’re greatly simplifying the mental gymnastics that application developers need to do when thinking about sensitive data and logging. A locked down system prevents mistakes from happening in the first place.

      In the next section, we look at a few additional best practices that will further prevent mistakes from occurring.
    questions_and_answers:
      - question: |
          How do I isolate sensitive data?
        answer: |
          You want to minimize the exposure your systems have to sensitive data by isolating it within a single source of truth like a data privacy vault.
      - question: |
          How should I log relations to a user?
        answer: |
          A simple way of avoiding this is to log a reference to the raw value through a process like tokenization.
      - question: |
          Should I use PII inside a URL?
        answer: |
          It’s common for proxy and web servers to automatically log URL requests. If you have a URL structure like /users/name-of-individual or /users/email, the names and email addresses of your customers are likely to be logged.  To avoid this, you should replace the use of sensitive user identifiers in URLs like names and emails with an arbitrary ID. This could be the row ID of the user, or if you need different URLs to map to different field values you could utilize tokenization here as well.
      - question: |
          What if I need to log an entry that contains sensitive data?
        answer: |
          Data masking is a one-way irreversible process for protecting sensitive data. A masking method creates a version of the sensitive data that looks structurally similar to the original but hides the most sensitive information contained within a field. Redaction is similar to masking, but hides all of the information contained within a field.
document_outline: |
  Overview of different types of logging standards that should be followed
